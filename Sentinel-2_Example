/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var geometry = 
    /* color: #d63000 */
    /* displayProperties: [
      {
        "type": "rectangle"
      }
    ] */
    ee.Geometry.Polygon(
        [[[6.611305259645186, 46.00747277002299],
          [6.611305259645186, 45.62558148313347],
          [7.648139976442061, 45.62558148313347],
          [7.648139976442061, 46.00747277002299]]], null, false);
/***** End of imports. If edited, may not auto-convert in the playground. *****/
// Calls Landsat image function 
var funcs = require('users/tomosdanielmorgan/EarthObservation:Sentinel-2');
// Defines the image collection
// Calls allLandsat
// Calls the geometry, CLOUD_COVER, CLOUD_COVER_LAND, Year1, Year2, Month1, Month2, Day1, Day2.
// funcs.allLandsat filters images from Landsat 4-9.
// funcs.EarlyLandsat filters images from Landsat 4-7.
// funcs.NewLandsat filters images from Landsat 8-9.
// Individual satellites can be called by using funcs.landsat and adding the number of specified satellite at the end. 
var Sentinel = funcs.allSentinel(geometry, 5, 2020, 2024, 7, 7, 1, 31)
//  .filter(ee.Filter.inList('MGRS_TILE', tiles))
  .map(function(image){return image.clip(geometry)})
  .select('B2', 'B3', 'B4', 'B8', 'B11', 'B12')
print(Sentinel)
  
Map.centerObject(geometry,  10)

var image= ee.Image('COPERNICUS/S2_HARMONIZED/20220718T102559_20220718T103413_T32TLR').clip(geometry).divide(10000)
// Change band combinations and min and max if required.
Map.addLayer(image, {bands: ['B8', 'B4', 'B3'], min: 0, max: 0.6}, 'false colour');
Map.addLayer(image, {bands: ['B4', 'B3', 'B2'], min: 0, max: 0.6}, 'true colour');


//Change 'MagPoint_SentinelImages' too your desired file in the Google Drive.
//Change crs: 'EPSG' too desired EPSG area.
var batches = require('users/fitoprincipe/geetools:batch');
batches.Download.ImageCollection.toDrive(Sentinel, 'HOME', {
  scale: 10,
//  crs:'EPSG:3857',
//  maxPixels:1e13,
  region: geometry
})
  